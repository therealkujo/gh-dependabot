#!/usr/bin/env python3

import sys
import click
import shutil
import subprocess
import json
import csv
import re
import time
from pyrate_limiter import Duration, Limiter, RequestRate

limiter = Limiter(RequestRate(1, Duration.SECOND))

@click.group()
def dependabot():
    """A GH CLI extension to manage dependabot"""

@dependabot.command()
@click.argument('repo', nargs=-1)
@click.option('-o', '--output', help='Path to the output file')
def export(repo, output):
    """
        Pulls all dependabot alerts and exports them to a CSV file

        REPO is space separated in the OWNER/NAME format
    """
    alerts = []
    for repository in repo:
        click.echo("Exporting dependabot alerts from %s into %s" % (repository, output))

        alerts += get_dependabot_alerts(repository)
    
    generate_csv(alerts, output)
    

def get_dependabot_alerts(repo_name, cursor='null'):
    query = """
    query ($org: String! $repo: String! $cursor: String){
        repository(owner: $org name: $repo) {
            name
            vulnerabilityAlerts(first: 100 after: $cursor) {
                pageInfo {
                    hasNextPage
                    endCursor
                }
                totalCount
                nodes {
                    id
                    securityAdvisory {
                        ...advFields
                    }
                    securityVulnerability {
                        package {
                            ...pkgFields
                        }
                        vulnerableVersionRange
                        advisory {
                            cvss {
                                score
                            }
                        }
                    }
                    createdAt
                    state
                    fixedAt
                    autoDismissedAt
                    dismissedAt
                    dismissReason
                    dismisser {
                        login
                    }
                    vulnerableManifestPath
                    vulnerableRequirements
                }
            }
        }
    }
    fragment advFields on SecurityAdvisory {
        ghsaId
        permalink
        severity
        description
        summary
    }
    fragment pkgFields on SecurityAdvisoryPackage {
        name
        ecosystem
    }
    """
    repo_name_list = repo_name.split('/')
    command = [ 'graphql', '-F', "org=%s" % repo_name_list[0], '-F', "repo=%s" % repo_name_list[1],  '-F', "cursor=%s" % cursor, '-f', "query=%s" % query]

    response_code, headers, body = call_gh_api(command)
    if response_code != '200':
        click.echo("ERROR: Could not get dependabot alerts for %s" % repo_name)
        click.echo("Response Code: %s\nHTTP Headers: %s\nError Message: %s" % (response_code, headers, body))
        return False

    dependabot_results = json.loads(body)
    alerts = parse_alerts(repo_name, dependabot_results["data"]["repository"]["vulnerabilityAlerts"]["nodes"])
    
    if not dependabot_results["data"]["repository"]["vulnerabilityAlerts"]["pageInfo"]["hasNextPage"]:
        return alerts
    else:
        return alerts + get_dependabot_alerts(repo_name, dependabot_results["data"]["repository"]["vulnerabilityAlerts"]["pageInfo"]["endCursor"])

def parse_alerts(repo_name, data):
    alerts = []

    for alert in data:
        # click.echo(alert)
        parsed_alert = {}
        parsed_alert["repo"] = repo_name
        parsed_alert["id"] = alert["id"]
        parsed_alert["advisory_permalink"] = alert["securityAdvisory"]["permalink"]
        parsed_alert["severity"] = alert["securityAdvisory"]["severity"]
        parsed_alert["cvss_score"] = alert["securityVulnerability"]["advisory"]["cvss"]["score"]
        parsed_alert["summary"] = alert["securityAdvisory"]["summary"]
        parsed_alert["description"] = alert["securityAdvisory"]["description"]
        parsed_alert["package_ecosystem"] = alert["securityVulnerability"]["package"]["ecosystem"]
        parsed_alert["package_name"] = alert["securityVulnerability"]["package"]["name"]
        parsed_alert["package_version"] = alert["vulnerableRequirements"]
        parsed_alert["vulnerable_versions"] = alert["securityVulnerability"]["vulnerableVersionRange"]
        parsed_alert["manifest_filepath"] = alert["vulnerableManifestPath"]
        parsed_alert["created_at"] = alert["createdAt"]
        parsed_alert["state"] = alert["state"]
        parsed_alert["fixed_at"] = alert["fixedAt"]
        parsed_alert["dismissed_at"] = alert["dismissedAt"]
        parsed_alert["dismiss_reason"] = alert["dismissReason"]
        parsed_alert["dismissed_by"] = alert["dismisser"]
        parsed_alert["autodismissed_at"] = alert["autoDismissedAt"]

        alerts.append(parsed_alert)
    
    return alerts

def generate_csv(data, filename):

    if filename is not None:
        output_file = open(filename, 'w', newline='')
        csv_writer = csv.writer(output_file)
    else:
        csv_writer = csv.writer(sys.stdout)

    needs_header = True
    for alert in data:
        if needs_header:
            csv_writer.writerow(alert.keys())
            needs_header = False
        csv_writer.writerow(alert.values())
    
    if filename is not None:
        output_file.close()

@dependabot.command()
@click.option('-a', '--alerts', is_flag=True, help='Enable dependabot alerts')
@click.option('-s', '--security', is_flag=True, help='Enable dependabot security updates')
@click.option('-o', '--organization', is_flag=True, help='Enable dependabot at the organization level')
@click.argument('names', nargs=-1)
def enable(names, organization, security, alerts):
    """
        Enables dependabot features for an organization or repo

        NAME is space separated in the OWNER/NAME format or just ORGANIZATION
    """

    enable_type = "repositories"
    if organization:
        enable_type = "organization(s)"

    alert_success = []
    alert_failed = []
    security_success = []
    security_fail = []
    for name in names:
        if alerts:
            click.echo("Enabling dependabot alerts for %s" % name)
            if enable_feature(name, organization, 'alerts'):
                alert_success.append(name)
            else:
                alert_failed.append(name)

        if security:
            click.echo("Enabling dependabot security updates for %s" % name)
            if enable_feature(name, organization, 'security'):
                security_success.append(name)
            else:
                security_fail.append(name)

    if alerts:
        print_result('alerts', alert_success, enable_type, True)
        print_result('alerts', alert_failed, enable_type, False)

    if security:
        print_result('security updates', security_success, enable_type, True)
        print_result('security updates', security_fail, enable_type, False)

def print_result(feature, result_list, enable_type, success):
    if success:
        click.echo("Successfully enabled dependabot %s for %i %s" % (feature, len(result_list), enable_type))
        if len(result_list) > 0:
            click.echo("List of successfully enabled %s:" % enable_type)
    else:
        click.echo("Unable to enable dependabot %s for %i %s" % (feature, len(result_list), enable_type))
        if len(result_list) > 0:
            click.echo("List of unsuccessful %s:" % enable_type)

    for name in result_list:
        click.echo(name)

def enable_feature(name, organization, feature):
    if feature == 'alerts' and organization:
        url = "/orgs/%s/dependabot_alerts/enable_all" % name
        method = 'POST'
        feature_name = 'dependabot alerts'
    elif feature == 'alerts' and not organization:
        url = "/repos/%s/vulnerability-alerts" % name
        method = 'PUT'
        feature_name = 'dependabot alerts'
    elif feature == 'security' and organization:
        url = "/orgs/%s/dependabot_security_updates/enable_all" % name
        method = 'POST'
        feature_name = 'dependabot security updates'
    elif feature == 'security' and not organization:
        url = "/repos/%s/automated-security-fixes" % name
        method = 'PUT'
        feature_name = 'dependabot security updates'
    else:
        click.echo('ERROR: Unknown security feature \'%s\'' % feature)
        return False

    accept_header = 'Accept: application/vnd.github+json'

    command = [ '--method', method, '-H', accept_header, url]

    response_code, headers, body = call_gh_api(command)

    if response_code == '422':
        click.echo("ERROR: Could not enable %s for %s" % (feature_name, name))
        click.echo("Another security feature is being enabled or a security policy is preventing enablement for this org")
        return False
    elif response_code != '204':
        click.echo("ERROR: Could not enable %s for %s" % (feature_name, name))
        click.echo("Response Code: %s\nHTTP Headers: %s\nError Message: %s" % (response_code, headers, body))
        return False

    return True

@limiter.ratelimit("GitHub", delay=True)
def call_gh_api(command):
    gh_cli = shutil.which('gh')
    base_command = [ gh_cli, 'api', '--include' ]

    try:
        process = subprocess.run(base_command + command, text=True, capture_output=True, check=True)
        output = process.stdout
    except subprocess.CalledProcessError as error:
        output = error.stdout

    response_code, headers, body = parse_api_output(output)

    if response_code == '403' and headers['X-Ratelimit-Remaining'] == '0':
        current_time = int(time.time())
        sleep_time = (int(headers['X-Ratelimit-Reset']) - current_time) + 5
        rate_limit_type = "primary"
    elif response_code == '403' and 'Retry-After' in headers:
        sleep_time = int(headers['Retry-After']) + 5
        rate_limit_type = "secondary"
    elif response_code == '403'and 'secondary rate limit' in body:
        sleep_time = 60
        rate_limit_type = "secondary"
    else:
        return (response_code, headers, body)

    click.echo("GitHub %s rate limit hit. Sleeping for %i seconds" % (rate_limit_type, sleep_time))
    time.sleep(sleep_time)
    return call_gh_api(command)

def parse_api_output(output):
    # Regex to parse the API output
    # Group 1 will get the HTTP status code
    # Group 2 will get the HTTP response headers
    # Group 3 will get the HTTP body
    api_output_regex = re.compile(r'HTTP/\d\.\d (\d+) (?:\w[\w\s]+)\n(.+?)(?:\n|\r\n){2}([^\n]+)?\n?', re.DOTALL)

    # Regex to parse the HTTP response headers into a JSON format
    header_regex = re.compile(r'([\w-]+):\s?(.+?)\r?\n')

    response_code, headers, body = api_output_regex.findall(output)[0]
    parsed_header = { item[0]: item[1] for item in header_regex.findall(headers) }

    return (response_code, parsed_header, body)

if __name__ == '__main__':
    dependabot(obj={})
